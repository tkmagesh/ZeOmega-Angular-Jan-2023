https://bit.ly/javascript-training-videos


JS Functions
    1. Functions are first class citizens (Higher Order Functions)

function isPrime(no){
    //initialize the cache
    isPrime['cache'] = isPrime['cache'] || {}
    
    //check the result is already memorized
    if (typeof isPrime.cache[no] !== 'undefined')
        return isPrime.cache[no];

    //process the input and memorize the result
    console.log(`processing ${no}`);
    isPrime.cache[no] = true
    for (var i = 2; i <= (no/2); i++) {
        if (no % i === 0) {
            isPrime.cache[no] = false
            break;
        }
    }
    return isPrime.cache[no]
}

var isPrime = (function () {
    //initialize the cache
    var cache = {}

    return function (no) {
        //check the result is already memorized
        if (typeof cache[no] !== 'undefined')
            return cache[no];

        //process the input and memorize the result
        console.log(`processing ${no}`);
        cache[no] = true
        for (var i = 2; i <= (no / 2); i++) {
            if (no % i === 0) {
                cache[no] = false
                break;
            }
        }
        return cache[no]
    }
})()

var isEven = (function () {
    //initialize the cache
    var cache = {}

    return function (no) {
        //check the result is already memorized
        if (typeof cache[no] !== 'undefined')
            return cache[no];

        //process the input and memorize the result
        console.log(`processing ${no}`);
        cache[no] = no % 2 === 0
        return cache[no]
    }
})()

2. Variadic functions
    function sum(){
        var result = 0;
        for (var i = 0; i < arguments.length; i++ ){
            result += arguments[i]
        }
        return result
    }
3. 

function memoize(fn) {
    //initialize the cache
    var cache = {}

    return function (no) {
        //check the result is already memorized
        if (typeof cache[no] !== 'undefined')
            return cache[no];

        //process the input and memorize the result
        console.log(`processing ${no}`);
        cache[no] = fn(no)
        return cache[no]
    }
}

var isPrime = memoize(function(no){
    for (var i = 2; i <= (no / 2); i++) {
        if (no % i === 0) {
            return false;
        }
    }
    return true;
})

var isEven = memoize(function(no){
    return no % 2 === 0
})

TODO:
Rewrite the Memoize function so that it can work with any function taking any number of arguments

function memoize(fn) {
    var cache = {}
    return function(){
        var key = JSON.stringify(arguments)
        if (typeof cache[key] !== 'undefined')
            return cache[key];
        console.log('processing')
        cache[key] = fn.apply(undefined, arguments)
        return cache[key]
    }
}

The following should work
var add = memoize(function(x,y){
    return x + y
})
add(100,200)


Function Invocation Patterns
    1. As a method of an object
    2. As a function
    3. Using the 'call' method of the function
    4. Using the 'apply' method of the function
    5. Using the 'new' keyword
        this => new object
        this => returned by default

    6. As an Immediately Invoked Function Expression (IIFE)


var productsArr = [
    { id: 1, name: 'Pen'},
    { id: 2, name: 'Pencil' },
    { id: 3, name: 'Marker' },
    { id: 4, name: 'Notepad' },
    { id: 5, name: 'Stappler' },
]

var productsMap = {
    1 : { id: 1, name: 'Pen' },
    2 : { id: 2, name: 'Pencil' },
    3 : { id: 3, name: 'Marker' },
    4 : { id: 4, name: 'Notepad' },
    5: { id: 5, name: 'Stappler' },
    length : 5
}

[].slice.call(productsMap,1,3)