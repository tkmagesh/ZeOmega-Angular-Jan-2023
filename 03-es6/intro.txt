ES6 features

1. let
2. const
3. Array destructuring
    var nos = [10,20,30,40,50]
    var [x, y] = nos

4. Rest operator (array)
    var [x, y, ...z] = nos

5. Spread operator (array)
    var newNos = [ ...nos, 100, 200, 300 ]

6. Object destructuring
    var emp = {
        id : 100,
        name : 'Magesh',
        salary : 10000
    }
    var {id , salary} = emp
    var {id:x , salary:y} = emp

7. Rest operator (Object)
    var { id : x, ...z } = emp

8. Spread operator (Object)
    var newEmp = { ...emp, city : 'Bengaluru' }

9. Arrow functions
    /*
        //function statement
        function add(x,y){
            return x + y
        }

        //function expression
        var add = function(x,y){
            return x + y;
        }

        //arrow function
        var add = (x,y) => {
            return x + y;
        }

        */
        var add = (x,y) => x + y;

        var nos = [3,1,4,2,5]

        nos.filter(function(no){
            return no % 2 === 0;
        })

        nos.filter((no) => no % 2 === 0)

10. template strings
    var x = 10, y = 20
    
    // sum of 10 and 20 is 30
    
    var s1 = 'sum of ' + x + ' and ' + y + ' is ' + (x+y)
    var s2 = `sum of ${x} and ${y} is ${x+y}`

11. iterators
    var nos = [3,1,4,2,5]
    for (var no of nos)
        console.log(no)


    Custom iterators
    function listIterator(){
        var list = [100,200,300,400]
        
        return {
            [Symbol.iterator] : function(){
                var idx = -1;
                return {
                    next : function(){
                        idx++
                        if (idx < list.length){
                            return { value : list[idx], done : false }
                        } else {
                            return { value : undefined, done : true }
                        }
                    }
                }
            }
        }
    }
    for (var x of listIterator())
    console.log(x)

    function getData(){
        var nos = []
        for (var i = 0; i < 1000; i++) {
            nos[i] = i + 3
        }
        return nos
    }
    function getPrimes(list) {
        return {
            [Symbol.iterator]: function () {
                var idx = -1;
                return {
                    next : function(){
                        var found = false
                        while (!found){
                            if (idx >= list.length){
                                break
                            }
                            idx++
                            if (isPrime(list[idx])) {
                                found = true
                                break
                            }
                        }
                        if (found){
                            found = false
                            console.log(idx)
                            return { value : list[idx], done : false}
                        } else {
                            return { value : undefined, done : true }
                        }
                    }
                }
            }
        }
    }
    function isPrime(no){
        for (var i = 2; i <= (no/2); i++)
            if (no % i === 0){
                return false
            }
        return true
    }

12. Generator
function *getPrimes(list) {
    for (var i = 0; i < list.length; i++){
        if (isPrime(list[i])){
            yield list[i]
        }
    }
    return
}

13. Symbol

14. Promise